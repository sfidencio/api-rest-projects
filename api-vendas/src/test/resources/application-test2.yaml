spring:
  data:
    redis:
      url: redis://localhost:6379
      #host: localhost
      #port: 6379
    cache:
      type: redis
  application:
    name: api-vendas
  datasource:
    #Em memoria vai ser usado para testes
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: sa
    driverClassName: org.h2.Driver
    hikari:
      maximum-pool-size: 5
      idle-timeout: 30000
      pool-name: VendasHikariCP
  jpa:
    open-in-view: false #https://vladmihalcea.com/the-open-session-in-view-anti-pattern/
    #Permite que o hibernate mantenha a sessao aberta ate o final da requisicao se 'true'
    #Para evitar o erro de lazy loading(LazyInitializationException),
    #Mas pode causar problemas de performance e Relacoes OneToMany e ManyToMany com Fetch LAZY
    show-sql: true
    properties:
      hibernate:
        format_sql: true #https://www.baeldung.com/sql-logging-spring-boot
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update #create-drop - cria e destroi o banco a cada inicializacao
      #vamos deixar 'none' pois vamos criar o schema e dados via scripts la em baixo
    defer-datasource-initialization: true #retarda a inicializacao do datasource
  sql:
    init:
      mode: always #always, never, embedded - somente para h2 usa aways
      platform: h2
      #schema-locations: classpath:/schema_renomeado_para_nao_executar.sql #schema_renomeado_para_nao_executar.sql e data_renomeado_para_nao_executar.sql sao executados sempre que o spring boot inicia
      #data-locations: classpath:/data_renomeado_para_nao_executar.sql #schema_renomeado_para_nao_executar.sql e data_renomeado_para_nao_executar.sql sao executados sempre que o spring boot inicia
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: false

