version: '3.7'
services:
  db:
    image: postgres:13-alpine
    container_name: postgres
    networks:
      - api-vendas-network
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres@@
      POSTGRES_DB: api-vendas
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data #docker named volumes
  app:
    image: api-vendas:latest
    platform: linux/amd64
    container_name: api-vendas
    networks:
      - api-vendas-network
    #build: . #default build context quando tempos apenas o Dockerfile
    build:
      context: .
      dockerfile: Dockerfile-api-vendas
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/api-vendas
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres@@
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      REDIS_HOST: redis
      REDIS_PORT: 6379
  redis: #https://cloudinfrastructureservices.co.uk/run-redis-with-docker-compose/
    image: redis:latest
    platform: linux/amd64
    networks:
      - api-vendas-network
    build:
      context: .
      dockerfile: Dockerfile-redis
    #command: ["redis-server", "--protected-mode", "no"]
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

networks:
  api-vendas-network:
    driver: bridge

#Entenda o funcionamento do volumes no docker-compose
#https://devopscell.com/docker/docker-compose/volumes/2018/01/16/volumes-in-docker-compose.html
#E possivel utilizar Docker host mounted volumes ou Docker named volumes

volumes:
  postgres-data:
    driver: local